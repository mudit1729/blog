
var documents = [{
    "id": 0,
    "url": "https://mudit1729.github.io/404.html",
    "title": "",
    "body": " 404 Page not found :(  The requested page could not be found. "
    }, {
    "id": 1,
    "url": "https://mudit1729.github.io/about/",
    "title": "About Me",
    "body": "My name is Mudit Jain. I am pursuing graduate studies in Electrical and Computer Engineering at University of California, San Diego with a keen interest in Machine Learning and Data Science. I am actively looking for internships in Machine Learning and Embedded Systems domain. I have completed my Bachelor of Engineering focused in Electronics and Communication Engineering from Birla Institute of Technology and Science, Pilani. Following that, I have worked at NVIDIA Graphics, Bengaluru for 3 years as an Automotive System Software Engineer in the IO Virtualization team. : "
    }, {
    "id": 2,
    "url": "https://mudit1729.github.io/categories/",
    "title": "Tags",
    "body": "Contents: {% if site. categories. size &gt; 0 %} {% for category in site. categories %} {% capture category_name %}{{ category | first }}{% endcapture %} {{ category_name }}{% endfor %}{% endif %} {% for category in site. categories %}  {% capture category_name %}{{ category | first }}{% endcapture %} &lt;h3 id = {{ category_name }} &gt;&lt;i class= fas fa-tags category-tags-icon &gt;&lt;/i&gt;&lt;/i&gt; {{ category_name }}&lt;/h3&gt;&lt;a name= {{ category_name | slugize }} &gt;&lt;/a&gt;{% for post in site. categories[category_name] %}{%- assign date_format = site. minima. date_format | default:  %b %-d, %Y  -%}&lt;article class= archive-item &gt; &lt;p class= post-meta post-meta-title &gt;&lt;a class= page-meta  href= {{ site. baseurl }}{{ post. url }} &gt;{{post. title}}&lt;/a&gt; • {{ post. date | date: date_format }}&lt;/p&gt;&lt;/article&gt;{% endfor %} {% endfor %}"
    }, {
    "id": 3,
    "url": "https://mudit1729.github.io/images/copied_from_nb/",
    "title": "",
    "body": "WarningDo not manually save images into this folder. This is used by GitHub Actions to automatically copy images.  Any images you save into this folder could be deleted at build time. "
    }, {
    "id": 4,
    "url": "https://mudit1729.github.io/2020/03/01/CV.html",
    "title": "Cv",
    "body": "2020/03/01 - MUDIT JAIN       San Diego, CA.    +1 858 952 3792   mujain@ucsd. edu   https://www. linkedin. com/in/muditj1729/   TECHNICAL SKILLS       Languages: Python, C, C++, MATLAB, Bash          Technologies/Frameworks: PyTorch, NumPy, Pandas, Scikit-learn, Git, OpenCV, Perforce, LATEX, CUDA.          Tools: Jupyter, Google Cloud Platform / Colab, PyCharm, Vim, Visual Studio, Perforce, Linux, Jira, Jama, MS Office    EDUCATION University of California, San Diego Sept 2019 - Mar 2021       Master of Science in E. C. E specialization in Machine Learning and Data Science   GPA: 3. 66/4   Course Work: Deep Learning for Image Processing, Computer Vision, Statistical Learning Birla Institute of Technology and Science (BITS), India Aug 2012 - July 2016       B. E. Hons in Electronics and Communication Engineering   GPA: 8. 1/10   WORK EXPERIENCE UCSD, Graduate Researcher and Teaching Assistant Sept 2019 - Dec 2019 * Graduate Researcher in Drone Lab, UCSD : * Implemented custom stereo algorithms ( 16 path Semi Global Matching algorithm ) with hardware acceleration ( CUDA ). * Currently looking at real-time segmentation and silhouette based reconstruction from multi-view pts (multiple UAV scenario). * Graduate Teaching Assistant, Course: ECE 140A ( Art of Product Engineering ) : * This course integrates theory with practice. Our aim is to teach end-to-end software development, work with hardware and sensors, and build a real product for real potential customers. NVIDIA, Automotive System Software Engineer June 2016 - June 2019 * Designed, implemented and tested the software pipeline of I2C Virtualization for ARM-based NVIDIA SoCs. Also did the bring-up of the components on the FPGA and then on the SoC. * Optimized the bootloader and reduced boot-time by 50%. Implemented an O. S agnostic GPCDMA library. Also added HS400 support for SDMMC. Developed production tools that create OS firmware and boot the target in various modes. Google Summer of Code, Mentoring Organisation: RTEMS, Developer March 2016 - June 2016 * Ported FreeBSD SDMMC driver for RTEMS. Added DMA library for Raspberry Pi BSP, interfaced it with I2C &amp; SPI drivers. ACADEMIC PROJECTS - Machine Learning Domain Adaptation for Semantic Segmentation Sept 2019 – Dec 2019 * Trained a state-of-the-art semantic segmentation model [ OCNet ] on Cityscapes dataset * To overcome the limited labeled dataset problem, we used domain adaptation to generate real-world like data from gaming data, for that we trained a CycleGAN network to convert GTA data into real-world like data * Compared the results from OCNet trained only on Cityscapes dataset( 5000 images ) versus that of the network trained on Cityscapes plus 5000 adapted GTA images. We observe that the model perf. increases a bit when trained on a larger dataset. Image Denoising using Deep CNNs Sept 2019 – Dec 2019 * Implemented DnCNN, UDnCNN( U-Net based CNN ) and DUDnCNN ( U-Net with dilated convolutions ) and compared the validation performance of the nets for the problem of image denoising. Achieved accuracy of 99. 6%, 99. 7%, and 99. 85% respectively. Segmentation of Images using Bayes Decision Rule Sept 2019 – Dec 2019 * Implemented and applied the Expectation-Maximization algorithm to GMM’s in order to segment images into foreground and background. Feature extraction was done using a Discrete Cosine Transform. * Compared the accuracy of such a model to Naive Bayes classification and experimented with different hyper-parameters such as the number of clusters to further segmentation accuracy. ACADEMIC PROJECTS - Computer Vision Sparse Stereo Matching &amp; Naive Cam Scanner Sept 2019 – Dec 2019 * Implemented the Shi-Tomasi Corner detector to identify key features of an image. Concepts of epipolar geometry were used to match features in a stereo pair of images based on a similarity score. Also implemented a cam scanner by using the techniques of inverse homography to automatically warp a scanned image into one of the known dimensions 3-D Reconstruction of Surfaces using Photometric Stereo and Surface Rendering Sept 2019 – Dec 2019 * Reconstructed 3-D surfaces under the assumption of known light sources and Lambertian material. Applied specularity removal technique described by Mallick et al in order to account for Lambertian deviations. Approximated local illumination of scene objects using the Phong Model and Lambertian Model. "
    }, {
    "id": 5,
    "url": "https://mudit1729.github.io/jupyter/2020/02/20/test.html",
    "title": "Fastpages Notebook Blog Post",
    "body": "2020/02/20 -           About&#182;This notebook is a demonstration of some of capabilities of fastpages with notebooks. With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! Front Matter&#182;: Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: Setting toc: true will automatically generate a table of contentsSetting badges: true will automatically include GitHub and Google Colab links to your notebook. Setting comments: true will enable commenting on your blog post, powered by utterances. More details and options for front matter can be viewed on the front matter section of the README. Markdown Shortcuts&#182;: A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. A #hide_input comment at the top of any code cell will only hide the input of that cell.     The comment #hide_input was used to hide the code that produced this.   put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:              #collapse-hideimport pandas as pdimport altair as alt       put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:              #collapse-showcars = &#39;https://vega. github. io/vega-datasets/data/cars. json&#39;movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;sp500 = &#39;https://vega. github. io/vega-datasets/data/sp500. csv&#39;stocks = &#39;https://vega. github. io/vega-datasets/data/stocks. csv&#39;flights = &#39;https://vega. github. io/vega-datasets/data/flights-5k. json&#39;       Interactive Charts With Altair&#182;: Charts made with Altair remain interactive.  Example charts taken from this repo, specifically this notebook. Example 1: DropDown&#182;:       # single-value selection over [Major_Genre, MPAA_Rating] pairs# use specific hard-wired values as the initial selected valuesselection = alt. selection_single(  name=&#39;Select&#39;,  fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;],  init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;},  bind={&#39;Major_Genre&#39;: alt. binding_select(options=genres), &#39;MPAA_Rating&#39;: alt. binding_radio(options=mpaa)}) # scatter plot, modify opacity based on selectionalt. Chart(movies). mark_circle(). add_selection(  selection). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=&#39;IMDB_Rating:Q&#39;,  tooltip=&#39;Title:N&#39;,  opacity=alt. condition(selection, alt. value(0. 75), alt. value(0. 05)))    Example 2: Tooltips&#182;:       alt. Chart(movies). mark_circle(). add_selection(  alt. selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;])). encode(  x=&#39;Rotten_Tomatoes_Rating:Q&#39;,  y=alt. Y(&#39;IMDB_Rating:Q&#39;, axis=alt. Axis(minExtent=30)), # use min extent to stabilize axis title placement  tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;]). properties(  width=600,  height=400)    Example 3: More Tooltips&#182;:       # select a point for which to provide details-on-demandlabel = alt. selection_single(  encodings=[&#39;x&#39;], # limit selection to x-axis value  on=&#39;mouseover&#39;, # select on mouseover events  nearest=True,  # select data point nearest the cursor  empty=&#39;none&#39;   # empty selection includes no data points)# define our base line chart of stock pricesbase = alt. Chart(). mark_line(). encode(  alt. X(&#39;date:T&#39;),  alt. Y(&#39;price:Q&#39;, scale=alt. Scale(type=&#39;log&#39;)),  alt. Color(&#39;symbol:N&#39;))alt. layer(  base, # base line chart    # add a rule mark to serve as a guide line  alt. Chart(). mark_rule(color=&#39;#aaa&#39;). encode(    x=&#39;date:T&#39;  ). transform_filter(label),    # add circle marks for selected time points, hide unselected points  base. mark_circle(). encode(    opacity=alt. condition(label, alt. value(1), alt. value(0))  ). add_selection(label),  # add white stroked text to provide a legible background for labels  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),  # add text labels for stock prices  base. mark_text(align=&#39;left&#39;, dx=5, dy=-5). encode(    text=&#39;price:Q&#39;  ). transform_filter(label),    data=stocks). properties(  width=700,  height=400)    Data Tables&#182;: You can display tables per the usual way in your blog:       movies = &#39;https://vega. github. io/vega-datasets/data/movies. json&#39;df = pd. read_json(movies)# display table with pandasdf[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;,   &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]]. head()           Title   Worldwide_Gross   Production_Budget   IMDB_Rating         0   The Land Girls   146083. 0   8000000. 0   6. 1       1   First Love, Last Rites   10876. 0   300000. 0   6. 9       2   I Married a Strange Person   203134. 0   250000. 0   6. 8       3   Let's Talk About Sex   373615. 0   300000. 0   NaN       4   Slam   1087521. 0   1000000. 0   3. 4     Images&#182;: Local Images&#182;: You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax: ![](my_icons/fastai_logo. png) Remote Images&#182;: Remote images can be included with the following markdown syntax: ![](https://image. flaticon. com/icons/svg/36/36686. svg) Animated Gifs&#182;: Animated Gifs work, too! ![](https://upload. wikimedia. org/wikipedia/commons/7/71/ChessPawnSpecialMoves. gif) Captions&#182;: You can include captions with markdown images like this: ![](https://www. fast. ai/images/fastai_paper/show_batch. png  Credit: https://www. fast. ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ ) Other Elements&#182;Tweetcards&#182;: Typing &gt; twitter: https://twitter. com/jakevdp/status/1204765621767901185?s=20 will render this:  Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Youtube Videos&#182;: Typing &gt; youtube: https://youtu. be/XfoYk_Z5AkI will render this:   Boxes / Callouts&#182;: Typing &gt; Warning: There will be no second warning! will render this:    Warning: There will be no second warning! Typing &gt; Important: Pay attention! It's important. will render this:    Important: Pay attention! It&#8217;s important. Typing &gt; Tip: This is my tip. will render this:    Tip: This is my tip. Typing &gt; Note: Take note of this. will render this:    Note: Take note of this. Typing &gt; Note: A doc link to [an example website: fast. ai](https://www. fast. ai/) should also work fine. will render in the docs:    Note: A doc link to an example website: fast. ai should also work fine. Footnotes&#182;: You can have footnotes in notebooks just like you can with markdown. For example, here is a footnote 1. This is the footnote. &#8617; "
    }, {
    "id": 6,
    "url": "https://mudit1729.github.io/markdown/2020/01/14/test-markdown-post.html",
    "title": "Example Markdown Post",
    "body": "2020/01/14 - Basic setup: Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-filename. md Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. . md is the file extension for markdown files. The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. Basic formatting: You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: Lists: Here’s a list:  item 1 item 2And a numbered list:  item 1 item 2Boxes and stuff:  This is a quotation    You can include alert boxes…and…    You can include info boxesImages: Code: You can format text and code per usual General preformatted text: # Do a thingdo_thing()Python code and output: # Prints '2'print(1+1)2Formatting text as shell commands: echo  hello world . /some_script. sh --option  value wget https://example. com/cat_photo1. pngFormatting text as YAML: key: value- another_key:  another value Tables:       Column 1   Column 2         A thing   Another thing   Tweetcards: Altair 4. 0 is released! https://t. co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t. co/roXmzcsT58 . . . read on for some highlights. pic. twitter. com/vWJ0ZveKbZ &mdash; Jake VanderPlas (@jakevdp) December 11, 2019Footnotes:       This is the footnote.  &#8617;    "
    }, {
    "id": 7,
    "url": "https://mudit1729.github.io/2020/01/14/image_captioning.html",
    "title": "Sequence Models Notes",
    "body": "2020/01/14 - Vanishing gradients with RNNs If the neural network is a deep neural network then the gradient will have difficult time travelling back to the initial layers.  Exploding gradients are easier to spot -&gt; numerical overflow. Solution : gradient clipping Vanishing gradient is much harder to solve.  GRU : Gated Recurrent Unit : The addition in GRU in comparison with RNNs is that GRU has a memory cell and employs the cocept of gates. "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')
    this.metadataWhitelist = ['position']

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}